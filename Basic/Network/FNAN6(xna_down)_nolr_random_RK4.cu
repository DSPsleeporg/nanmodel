#include <cuda_runtime.h>
#include <cuda.h>    
#include "common.h"  //-I/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/examples/OpenACC/SDK/include/    ~.h

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <limits.h>
#include <vector>
#include <string>
#include <array>
#include <math.h>
#include <tuple>
#include <time.h>
#include <cmath>
#include <algorithm>
#include <numeric>
#include <stdlib.h>

#include <filesystem>  
#include <random>
#include <omp.h>  //OpenMP


//**compile command
// nvc++ -ta=tesla     (//-ta=tesla:cuda9.2)
// NAN_nolr_random_RK4.cu 
//-I/opt/nvidia/hpc_sdk/Linux_x86_64/22.9/examples/OpenACC/SDK/include/ 
//-std=c++20  （17以上）//std::filesystem::create_directories
//-o FNAN_diff_calc  (実行ファイル)




#define SAFE_FREE(ptr) if(ptr != NULL){free(ptr); ptr = NULL;}
#define SIZE(buff) (sizeof(buff)/sizeof(buff[s_a3[iy] 0])) 

//define neuron parameter 
#define cm 1.0
#define area 0.02
#define a_ca 0.5
#define b_na 0.001
#define kd_ca 30.0
#define ke_na 32.0
#define s_a_ampar 3.48
#define s_tau_ampar 2.0
// #define s_a_nmdar 0.5 
// #define s_tau_nmdar 10 100
//  #define x_a_nmdar 3.48
//  #define double x_tau_nmdar 0.1
#define vL -60.95
#define vNa 55.0
#define vK -100.0
#define vCa 120.0
#define vrest -70
#define vAMPAR 0
#define vNMDAR 0
// #define g_nmdar
// #define g_cav_s 

//block definition
#define blockdim_x 2
#define blockdim_y 1

//CUDA error check
#define CHECK(call)                   \
{                                      \
  const cudaError_t error = call;      \
  if(error != cudaSuccess)             \
  {                                    \
      printf("Error: %s:%d, ", __FILE__, __LINE__);               \
      printf("code:%d, reason: %s\n", error, cudaGetErrorString(error));    \
      exit(1);        \
  }                \
}             \


double cpuSecond(){
    struct timeval tp;
    gettimeofday(&tp, NULL);
    return ((double)tp.tv_sec + (double)tp.tv_usec * 1.e-6);
}


__device__ double dvdt_cal(double v, double mks, double hunav, double hnav, double nk, double na, double ha,  double ca, double dt, double i_ampar, double i_nmdar, double g_lek,double g_lena,  double g_kvhh,double g_cav,double g_kna,double g_unav,double g_kir, double g_nap, double g_kca, double g_nav, double g_kvsi, double g_kva, double g_ampar,double g_nmdar, double tau_na, double x_na, double y_na)
{   
    //calcurate channel current
    double i_lek = g_lek * (v - vK);
    double i_lena = g_lena * (v - 0);

    double m_inf_nap=1/(1+std::exp(-(v+55.7)/7.7));
    double i_nap=g_nap*std::pow(m_inf_nap, 3)*(v-vNa);
    
    double m_inf_kir=1/(1+std::exp(-(v+75)/4));
    double i_kir = g_kir *m_inf_kir* (v - vK);

    double i_kvhh= g_kvhh * std::pow(nk,4) * (v-vK);

    double m_inf_ca = 1.0 / (1.0 + std::exp(-(v+20.0)/9.0)); 
    double i_cav= g_cav * std::pow(m_inf_ca, 2) * (v-vCa);

    double m_inf_k = 1.0 / (1.0 + std::pow((ke_na/na), 3.0));
    double i_kna = g_kna * m_inf_k* (v-vK);

    double m_inf_kca = 1.0 / (1.0 + std::pow((kd_ca/ca), 3.5));
    double i_kca = g_kca * m_inf_kca* (v-vK);
    
    double i_kvsi=g_kvsi*mks*(v-vK);
    
    double m_inf_kva=1/(1+std::exp(-(v+50)/20));
    double i_kva=g_kva*std::pow(m_inf_kva,3)*ha*(v-vK);
    
    
    double a_inf_na=1.0;
    if(v+33.0+x_na==0){
    a_inf_na=1.0;
    }
    else{
    a_inf_na=0.1*(v+33.0+x_na)/(1-std::exp(-(v+33.0+x_na)/10.0));
    }
    double b_inf_na=4.0*std::exp(-(v+53.7+x_na)/12.0);
    double m_inf_na=a_inf_na/(a_inf_na+b_inf_na);
    double i_unav=g_unav*std::pow(m_inf_na, 3)*hunav*(v-vNa);

    double an_inf_na=1.0;
    if(v+33.0==0){
    an_inf_na=1.0;
    }
    else{
    an_inf_na=0.1*(v+33.0)/(1-std::exp(-(v+33.0)/10.0));
    }
    double bn_inf_na=4.0*std::exp(-(v+53.7)/12.0);
    double mn_inf_na=an_inf_na/(an_inf_na+bn_inf_na);
    double i_nav=g_nav*std::pow(mn_inf_na, 3)*hnav*(v-vNa);
    
    
    
    double dvdt = ((-10.0*area * (i_lek+i_lena + i_kvhh  +i_kir+i_nap+ i_cav +i_kca + i_kna +i_nav + i_unav+i_kvsi+i_kva)  - (i_ampar+i_nmdar)) / (10.0*cm*area))*dt;
   
   return dvdt;
}

__device__ double dnadt_cal(double v, double hunav, double hnav, double na, double dt, double g_unav,double g_lena, double g_nap, double g_nav, double tau_na, double x_na){
    double a_inf_na=1.0;
    if(v+33.0+x_na==0){
    a_inf_na=1.0;
    }
    else{
    a_inf_na=0.1*(v+33.0+x_na)/(1-std::exp(-(v+33.0+x_na)/10.0));
    }
    double b_inf_na=4.0*std::exp(-(v+53.7+x_na)/12.0);
    double m_inf_na=a_inf_na/(a_inf_na+b_inf_na);
    double i_unav=g_unav*std::pow(m_inf_na,3)*hunav*(v-vNa);
    double i_lena_na=g_lena*0.44*(v-vNa);
    
     double m_inf_nap=1/(1+std::exp(-(v+55.7)/7.7));
    double i_nap=g_nap*std::pow(m_inf_nap,3)*(v-vNa);
    
    double an_inf_na=1.0;
    if(v+33.0==0){
    an_inf_na=1.0;
    }
    else{
    an_inf_na=0.1*(v+33.0)/(1-std::exp(-(v+33.0)/10.0));
    }
    double bn_inf_na=4.0*std::exp(-(v+53.7)/12.0);
    double mn_inf_na=an_inf_na/(an_inf_na+bn_inf_na);
    double i_nav=g_nav*std::pow(mn_inf_na, 3)*hnav*(v-vNa);
    
    
  
    double dnadt = ((-b_na * 10 * area * i_unav)-(b_na*10*area*i_lena_na)-(b_na*10*area*i_nav)-(b_na*10*area*i_nap)- (na/tau_na))*dt;
    return dnadt;
}


__device__ double dcadt_cal(double v, double ca, double dt, double g_cav,double g_lena, double tau_ca){

    double i_lena_ca=g_lena*0.25*(v-vCa);
    
    double m_inf_ca = 1.0 / (1.0 + std::exp(-(v+20.0)/9.0)); 
    double i_cav= g_cav * std::pow(m_inf_ca, 2) * (v-vCa);
    
    double dcadt = ((-a_ca * 10 * area * i_cav)-(a_ca*10*area*i_lena_ca)- (ca/tau_ca))*dt;
    return dcadt;
}


__device__ double dndt_cal(double v,double nk,double dt){
    double an = 0.1;
    if (v == -34.0){
        an= 0.1;
    }
    else{
        an= 0.01 * (v+34.0) / (1.0-std::exp(-(v+34.0)/10.0));
    }
    double bn = 0.125 * std::exp(-(v+44.0)/25.0);
        double dndt =  (4.0 * (an*(1-nk)-bn*nk))*dt;

     return dndt;
}


__device__ double dhunavdt_cal(double v,double hunav,double y_na, double dt){
    double ah = 0.07*std::exp(-(v+50.0+y_na)/10.0);
    double bh = 1.0/(1.0+std::exp(-(v+20.0+y_na)/10.0));
    double dhunavdt =  (4.0 * (ah*(1-hunav)-bh*hunav))*dt;

     return dhunavdt;
}

__device__ double dhnavdt_cal(double v,double hnav, double dt){
    double anh = 0.07*std::exp(-(v+50.0)/10.0);
    double bnh = 1.0/(1.0+std::exp(-(v+20.0)/10.0));
    double dhnavdt =  (4.0 * (anh*(1-hnav)-bnh*hnav))*dt;

     return dhnavdt;
}

__device__ double dmksdt_cal(double v,double mks, double dt){
    double mksinf=1/(1+std::exp(-(v+34)/6.5));
    double mkstau=8/(std::exp(-(v+55)/30)+std::exp((v+55)/30));
    
    double dmksdt = ((mksinf-mks)/mkstau)*dt;

     return dmksdt;
}

__device__ double dhadt_cal(double v,double ha, double dt){
    double hainf=1/(1+std::exp((v+80)/6));
    
    double dhadt = ((hainf-ha)/15)*dt;

     return dhadt;
}


//AMPA gating variable s
__device__ double dsdt_a_cal(double v, double s_a, double dt){
        double fv = 1.0 / (1.0 + std::exp(-(v-20)/2.0));
        double dsdt_a = (s_a_ampar * fv - s_a/s_tau_ampar)*dt;

     return dsdt_a;
}

__device__ double ds1dt_a_cal(double v, double s1_a, double xn_a,  double dt){
        double ds1dt_a = (0.5*xn_a*(1-s1_a)-(s1_a/100))*dt;

     return ds1dt_a;
}

__device__ double dxndt_a_cal(double v,double xn_a,  double dt){
        double fv = 1.0 / (1.0 + std::exp(-(v-20)/2.0));
        double dxndt_a = (3.48*fv*-(xn_a/2))*dt;

     return dxndt_a;
}



//calculate differential eqations by RK4
__global__ void dt_gpu(double *v, double *v_nw, double *mks, double *hunav,double *hnav,  double *nk, double *na, double *ha, double *ca, double *s_a, double *s_a2, double *s_a3,double *s1_a, double *s1_a2, double *s1_a3, double *xn_a, double *xn_a2, double *xn_a3,  int *neuron_syn, int *synID, int N, int syN_sum, double dt,
                                                          double g_lek, double g_lena,  double g_kvhh,double g_cav,double g_kna, double g_unav, double g_kir, double g_nap, double g_kca, double tau_ca, double g_nav, double g_kvsi, double g_kva, double g_ampar, double g_nmdar, double tau_na, double x_na, double y_na)
{
   //v_nw: updated v
   //s_a: array for gating variables of AMPAR of each synapse
   //s_a2: next s_a
   //s_a3: updated s_a3
   //neuron_syN: array for the number of synapses per neuron
   //synID: array for index list of pre-synapse 
   
    unsigned int ix = threadIdx.x + blockIdx.x * blockDim.x;
    
    if (ix < N)  //ix neuron
    {  
        double v_n = v[ix];
        double v_up = v[ix];
        double mks_n=mks[ix];
        double hunav_n=hunav[ix];
        double hnav_n=hnav[ix];
        double nk_n = nk[ix];
        double na_n = na[ix];
        double ha_n=ha[ix];
        double ca_n = ca[ix];
        
        int syN = neuron_syn[ix];  //the number of synapse
        int syN_sum_i = 0;         //total synapses calculated before ix neuron
        for (int m=0; m<ix; m++){
            syN_sum_i += neuron_syn[m];
          }
        
        // k1
        double i_ampar =0;       //i_ampar in ix neuron
        for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double s_a_n = s_a[i];
            double dsdt_a = dsdt_a_cal(v[synID[i]], s_a_n, dt);
            i_ampar += g_ampar * s_a_n*(v_n-vAMPAR);
            s_a2[i] = s_a_n + 0.5*dsdt_a;   //next s_a
            s_a3[i] += dsdt_a/6.0;   //update s_a
        }
        
         double i_nmdar =0;       //i_nmdar in ix neuron
        for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double s1_a_n = s1_a[i];
            double xn_a_n = xn_a[i];
            double ds1dt_a = ds1dt_a_cal(v[synID[i]], s1_a_n, xn_a_n, dt);
            double dxndt_a = dxndt_a_cal(v[synID[i]], xn_a_n, dt);
            
            i_nmdar += g_nmdar * s1_a_n*(v_n-vNMDAR);
            s1_a2[i] = s1_a_n + 0.5*ds1dt_a;   //next s_a
            s1_a3[i] += ds1dt_a/6.0;   //update s_a
            
            xn_a2[i] = xn_a_n + 0.5*dxndt_a;   //next s_a
            xn_a3[i] += dxndt_a/6.0;   //update s_a
        }      

        double dvdt =  dvdt_cal(v_n, mks_n, hunav_n, hnav_n, nk_n, na_n,ha_n,  ca_n, dt, i_ampar, i_nmdar, g_lek, g_lena,  g_kvhh,g_cav,g_kna,g_unav,g_kir, g_nap, g_kca, g_nav, g_kvsi, g_kva, g_ampar, g_nmdar, tau_na, x_na, y_na);
        double dmksdt=dmksdt_cal(v_n, mks_n, dt);
        double dhunavdt=dhunavdt_cal(v_n, hunav_n, y_na, dt);
        double dhnavdt=dhnavdt_cal(v_n, hnav_n, dt);
        double dndt = dndt_cal(v_n, nk_n, dt);
        double dnadt = dnadt_cal(v_n, hunav_n,hnav_n,  na_n, dt, g_unav, g_lena, g_nap,g_nav,  tau_na, x_na);
         double dhadt = dhadt_cal(v_n, ha_n, dt);
        double dcadt = dcadt_cal(v_n, ca_n, dt, g_cav, g_lena, tau_ca);

        double v2 = v_n+0.5*dvdt;
        double mks2=mks_n+0.5*dmksdt;
        double hunav2=hunav_n+0.5*dhunavdt;
        double hnav2=hnav_n+0.5*dhnavdt;
        double nk2 = nk_n+0.5*dndt;
        double na2 = na_n+0.5*dnadt;
        double ha2 = ha_n+0.5*dhadt;
        double ca2 = ca_n+0.5*dcadt;
        
        v_up += dvdt/6.0;     //update v
        mks[ix] +=dmksdt/6.0;
        hunav[ix] +=dhunavdt/6.0;
        hnav[ix] +=dhnavdt/6.0;
        nk[ix] += dndt/6.0;   //update nk
        na[ix] += dnadt/6.0;  //update na
        ha[ix] += dhadt/6.0;  //update ha
        ca[ix] += dcadt/6.0;  //update ca
         
         //k2
        i_ampar = 0; 
        for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double dsdt_a = dsdt_a_cal(v[synID[i]], s_a2[i], dt);
            i_ampar += g_ampar * s_a2[i]*(v2-vAMPAR);
            s_a2[i] = s_a[i] + 0.5*dsdt_a;
            s_a3[i] += dsdt_a/3.0;
        }
  
         i_nmdar = 0; 
        for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double ds1dt_a = ds1dt_a_cal(v[synID[i]], s1_a2[i], xn_a2[i], dt);
            double dxndt_a = dxndt_a_cal(v[synID[i]], xn_a2[i], dt);
            i_nmdar += g_nmdar * s1_a2[i]*(v2-vNMDAR);
            s1_a2[i] = s1_a[i] + 0.5*ds1dt_a;
            s1_a3[i] += ds1dt_a/3.0;
            xn_a2[i] = xn_a[i] + 0.5*dxndt_a;
            xn_a3[i] += dxndt_a/3.0;           
        }
        
        
         dvdt =  dvdt_cal(v2, mks2, hunav2,hnav2,  nk2, na2, ha2, ca2,  dt, i_ampar,i_nmdar,  g_lek, g_lena,  g_kvhh,g_cav,g_kna,g_unav,g_kir, g_nap, g_kca, g_nav, g_kvsi, g_kva, g_ampar,  g_nmdar,  tau_na, x_na, y_na);
         dmksdt=dmksdt_cal(v2, mks2, dt);
         dhunavdt=dhunavdt_cal(v2,hunav2,y_na, dt);
         dhnavdt=dhnavdt_cal(v2,hnav2, dt);
         dndt = dndt_cal(v2, nk2, dt);
         dnadt = dnadt_cal(v2, hunav2, hnav2, na2, dt, g_unav, g_lena, g_nap, g_nav, tau_na, x_na);
        dhadt = dhadt_cal(v2, ha2, dt);
         dcadt = dcadt_cal(v2, ca2, dt, g_cav, g_lena, tau_ca);
        
        v2 = v_n+0.5*dvdt;
        mks2=mks_n+0.5*dmksdt;
        hunav2=hunav_n+0.5*dhunavdt;
        hnav2=hnav_n+0.5*dhnavdt;
        nk2 = nk_n+0.5*dndt;
        na2 = na_n+0.5*dnadt;
        ha2 = ha_n+0.5*dhadt;
        ca2 = ca_n+0.5*dcadt;
        
        v_up += dvdt/3.0;
        mks[ix] +=dmksdt/3.0;
        hunav[ix] +=dhunavdt/3.0;
        hnav[ix] +=dhnavdt/3.0;
        nk[ix] += dndt/3.0;
        na[ix] += dnadt/3.0;
       ha[ix] += dhadt/3.0;
        ca[ix] += dcadt/3.0;

        //k3
        i_ampar = 0; 
           for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double dsdt_a = dsdt_a_cal(v[synID[i]], s_a2[i],dt);
            i_ampar += g_ampar * s_a2[i]*(v2-vAMPAR);
            s_a2[i] =  s_a[i] + dsdt_a;
            s_a3[i] += dsdt_a/3.0;
        }
        
          i_nmdar = 0; 
        for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double ds1dt_a = ds1dt_a_cal(v[synID[i]], s1_a2[i], xn_a2[i], dt);
            double dxndt_a = dxndt_a_cal(v[synID[i]], xn_a2[i], dt);
            i_nmdar += g_nmdar * s1_a2[i]*(v2-vNMDAR);
            s1_a2[i] = s1_a[i] + 0.5*ds1dt_a;
            s1_a3[i] += ds1dt_a/3.0;
            xn_a2[i] = xn_a[i] + 0.5*dxndt_a;
            xn_a3[i] += dxndt_a/3.0;           
        }
        
        
         dvdt =  dvdt_cal(v2, mks2, hunav2,hnav2,  nk2, na2,ha2,  ca2,  dt, i_ampar,i_nmdar,  g_lek, g_lena,  g_kvhh,g_cav,g_kna,g_unav,g_kir, g_nap,g_kca, g_nav,g_kvsi, g_kva,   g_ampar, g_nmdar,  tau_na, x_na, y_na);
         dmksdt=dmksdt_cal(v2,mks2, dt);
         dhunavdt=dhunavdt_cal(v2,hunav2,y_na, dt);
         dhnavdt=dhnavdt_cal(v2,hnav2,dt);
         dndt = dndt_cal(v2, nk2, dt);
         dnadt = dnadt_cal(v2, hunav2, hnav2, na2, dt, g_unav, g_lena, g_nap, g_nav,  tau_na, x_na);
        dhadt = dhadt_cal(v2, ha2, dt);
          dcadt = dcadt_cal(v2, ca2, dt, g_cav, g_lena, tau_ca);

        v2 = v_n+0.5*dvdt;
        mks2=mks_n+0.5*dmksdt;
        hunav2=hunav_n+0.5*dhunavdt;
         hnav2=hnav_n+0.5*dhnavdt;
        nk2 = nk_n+0.5*dndt;
        na2 = na_n+0.5*dnadt;
         ha2 = ha_n+0.5*dhadt;
         ca2 = ca_n+0.5*dcadt;
        
        v_up += dvdt/3.0;
        mks[ix]+=dmksdt/3.0;
        hunav[ix] +=dhunavdt/3.0;
        hnav[ix] +=dhnavdt/3.0;
        nk[ix] += dndt/3.0;
        na[ix] += dnadt/3.0;
       ha[ix] += dhadt/3.0;
        ca[ix] += dcadt/3.0;

        //k4 
         i_ampar = 0; 
       
        for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double dsdt_a = dsdt_a_cal(v[synID[i]], s_a2[i],dt);
            i_ampar += g_ampar * s_a2[i]*(v2-vAMPAR);
            s_a3[i] += dsdt_a/6.0;
        }

        i_nmdar=0;
        for (int i= syN_sum_i; i<(syN_sum_i+syN); i++){
            double ds1dt_a = ds1dt_a_cal(v[synID[i]], s1_a2[i], xn_a2[i], dt);
           double dxndt_a = dxndt_a_cal(v[synID[i]],  xn_a2[i], dt);
            i_nmdar += g_nmdar * s1_a2[i]*(v2-vNMDAR);
            s1_a3[i] += ds1dt_a/6.0;
            xn_a3[i] += dxndt_a/6.0;
        }
        
        
        
        
         dvdt =  dvdt_cal(v2, mks2, hunav2,hnav2,  nk2, na2,ha2,  ca2,  dt, i_ampar,   i_nmdar,  g_lek, g_lena,  g_kvhh,g_cav,g_kna,g_unav,g_kir, g_nap, g_kca, g_nav, g_kvsi, g_kva, g_ampar,  g_nmdar,  tau_na, x_na, y_na);
         dmksdt=dmksdt_cal(v2, mks2, dt);
         dhunavdt=dhunavdt_cal(v2,hunav2,y_na, dt);
         dhnavdt=dhnavdt_cal(v2,hnav2,dt);
         dndt = dndt_cal(v2, nk2, dt);
         dnadt = dnadt_cal(v2, hunav2, hnav2, na2, dt, g_unav, g_lena,g_nap, g_nav,  tau_na, x_na);
          dhadt = dhadt_cal(v2, ha2, dt);
         dcadt = dcadt_cal(v2, ca2, dt, g_cav, g_lena, tau_ca);
         
        v_up += dvdt/6.0;
        mks[ix] +=dmksdt/6.0;
        hunav[ix] +=dhunavdt/6.0;
       hnav[ix] +=dhnavdt/6.0;
        nk[ix] += dndt/6.0;
        na[ix] += dnadt/6.0;    
       ha[ix] += dhadt/6.0;    
        ca[ix] += dcadt/6.0;
        
        v_nw[ix] = v_up; //updated v -> new array
    }
}
    

int main(int argc, char * argv[]){
std::vector<double> lek = {0.11747672867650001, 0.15806897764650002, 0.190525598065, 0.006971765750000001, 0.013858472118, 0.011029374253, 0.07326075535900001, 0.025794161900000005, 0.20858855660550002, 0.170228165593, 0.012173180238, 0.27031698501600004, 0.23840852634600004, 0.0984421509485, 0.017181085180500003, 0.19212991177500002, 0.08747197804000001, 0.028221201871000003, 0.08064748821300001, 0.047924251162000005, 0.012275008184, 0.027300408279000002, 0.010990638699500002, 0.04049523851200001, 0.0861597592815, 0.033721047672500004, 0.027333579707, 0.254599380647, 0.064724594492, 0.009625999893500001, 0.012176132656, 0.41903742423500007, 0.0206894037505, 0.048444834254500004, 0.092589402209, 0.155072466588, 0.214648320801, 0.0285896269455, 0.148903022258, 0.20832923325, 0.026290572222500003, 0.042676434220000004, 0.057692923425, 0.0297373373875, 0.15563392457900002, 0.3885419566155, 0.0338533579325, 0.493378139235, 0.057103109056, 0.4127450029185, 0.062290418495000006, 0.05898853513700001, 0.008163051785, 0.06226883244300001, 0.2804756293975, 0.009734528073000001, 0.08752418781, 0.15027886245500002, 0.029906125003500005, 0.0328102571945, 0.06952765806500001, 0.1517703558865, 0.007543139696500001, 0.11421037794950001, 0.044259909124999997, 0.109885809056, 0.01171248113, 0.031050778803000004, 0.205301182395, 0.0119417244415, 0.016776719719500004, 0.067756402305, 0.12997849585000001, 0.02611702624, 0.292405837946, 0.0179716018045, 0.195928097574, 0.10839433451900002, 0.057266385573000005, 0.025500275628000002, 0.050688521997500006, 0.11306397549450001, 0.37231657718700006, 0.06979349270900001, 0.31328637663000003, 0.2074669412965, 0.4601204712515001, 0.437774993832, 0.19080765272300002, 0.0265245775575, 0.0664555482835, 0.6387391869425001, 0.023097069545000005, 0.050661588802, 0.019047027375, 0.013763887470000001, 0.082586425956, 0.0213088824845, 0.5301134618435001, 0.11298818843600002};
std::vector<double> lena = {0.0752660583235, 0.10127306935350001, 0.122067671935, 0.004466734250000001, 0.008878971882, 0.007066399746999999, 0.046937366641000004, 0.0165260381, 0.1336404123945, 0.10906332840699999, 0.007799223762, 0.173189142984, 0.152745741654, 0.0630708120515, 0.011007733819500001, 0.12309553822500001, 0.056042341960000006, 0.018081016129, 0.051669965787000005, 0.030704544838000003, 0.007864463816, 0.017491073721000002, 0.007041582300500001, 0.025944857488000003, 0.055201617718500004, 0.0216047073275, 0.017512326293, 0.163119045353, 0.041468341508, 0.0061672731065, 0.007801115344, 0.26847270576500004, 0.0132554752495, 0.031038076745500003, 0.059321019791, 0.099353237412, 0.137522837199, 0.0183170620545, 0.09540054174200001, 0.13347426675, 0.0168440827775, 0.02734232578, 0.036963226575, 0.0190523876125, 0.099712957421, 0.2489345923845, 0.0216894770675, 0.316101990765, 0.036585338944, 0.2644412200815, 0.039908791505, 0.037793310863, 0.005229978215, 0.039894961557, 0.1796976756025, 0.006236805927, 0.056075792189999994, 0.09628202754500001, 0.0191605279965, 0.0210211738055, 0.044545611935, 0.0972376111135, 0.0048328073035, 0.07317334305050001, 0.028356840874999997, 0.07040263894399999, 0.007504058870000001, 0.019893895197, 0.131534227605, 0.0076509325585, 0.010748661280500001, 0.043410787695, 0.08327580415000001, 0.01673289376, 0.187341230054, 0.0115142091955, 0.12552899442600002, 0.069447067481, 0.036689948427000005, 0.016337748372, 0.0324755830025, 0.0724388555055, 0.23853916881300002, 0.044715929291, 0.20071916337, 0.1329218057035, 0.29479416574850004, 0.280477662168, 0.122248381277, 0.0169940074425, 0.0425773447165, 0.4092332280575, 0.014798040455000001, 0.032458327198, 0.012203222625000001, 0.00881837253, 0.052912222044, 0.0136523685155, 0.33963791115650005, 0.072390299564};
std::vector<double> kvhh = {8.391261685, 11.4945794, 58.08179219, 46.1905655, 18.26030004, 88.34953827, 4.79746088, 56.42948644, 39.15092938, 33.82327048, 14.63478653, 23.80138949, 2.860745738, 47.77537536, 67.68858113, 20.1791411, 11.6063482, 22.73679341, 2.738855892, 16.07044268, 43.90782481, 0.021700479, 52.67862493, 14.46934872, 11.25563498, 24.33763574, 34.64660429, 7.998915331, 70.15186037, 24.70389839, 43.32344751, 14.2531977, 29.9189209, 26.77236986, 35.62963212, 49.69778261, 9.686825332, 26.20618465, 15.6906126, 61.737091, 26.28398014, 49.2383266, 22.39447125, 77.80580877, 32.147546, 0.087404406, 81.1958038, 7.88592348, 91.63631757, 42.74923582, 22.69462366, 48.6435659, 22.2284699, 24.34268615, 36.36833484, 36.05529836, 65.2381813, 2.83521496, 96.19991954, 22.77331252, 15.2940852, 15.37576239, 35.91544717, 47.17691957, 52.0789059, 34.60225946, 55.5922939, 9.109750985, 37.5592918, 33.67531246, 43.25658734, 21.619586, 32.2275193, 16.957364, 51.47602011, 94.28346595, 62.50660926, 59.69357035, 36.88943572, 32.15324036, 14.87885125, 28.96152861, 57.10693673, 36.47914738, 8.74455003, 25.89984882, 60.06267808, 9.894819106, 67.49237124, 10.97625616, 74.53939069, 4.524708358, 18.2407094, 0.045677672, 13.5450931, 28.15154271, 15.25205822, 45.87170825, 46.31428579, 29.13811607};
std::vector<double> cav = {4.082850599, 0.240906724, 0.106377926, 0.11136744, 0.719841407, 0.708613572, 1.914899582, 0.010091329, 0.116857097, 1.019477391, 11.30742349, 0.536387848, 2.902400621, 0.048362574, 0.96910601, 0.35603385, 1.61107455, 13.45668996, 0.014925507, 1.11744681, 5.889378093, 0.312031658, 2.1094533, 2.558421859, 4.802974097, 0.122397392, 0.032954531, 4.031240581, 13.60187478, 0.115163427, 0.200644586, 7.35538463, 0.309253764, 0.319563093, 9.183813831, 0.020607304, 3.624563401, 0.017775648, 4.825081895, 4.998127287, 0.05396347, 17.2298097, 5.559045883, 0.108430807, 8.213809086, 6.329372477, 0.233499071, 1.42953838, 2.028909219, 0.061502626, 12.5823214, 0.091439553, 0.61084493, 0.131007362, 2.379785671, 0.066595773, 0.02408157, 2.47110251, 0.012613026, 15.09740831, 7.40169099, 0.050642745, 0.305012722, 0.180995588, 0.33498132, 0.133646145, 0.25993602, 4.941183114, 0.01088946, 10.49789534, 0.010905289, 0.663036332, 8.14172016, 1.05550776, 0.124673666, 0.16750624, 0.022904925, 1.753105707, 0.063125729, 0.205000155, 3.035247095, 1.789955681, 5.661793791, 0.307239991, 6.40159464, 0.125508257, 4.102172141, 1.521913878, 0.090967988, 0.336866645, 0.011393204, 4.173883113, 0.57632215, 0.019088003, 0.29107944, 0.013102335, 5.838770113, 0.084677362, 3.585287375, 0.010491631};
std::vector<double> kna = {21.44963623, 16.81155308, 2.005535894, 35.250582, 47.67226507, 26.81080669, 51.91584154, 7.398087435, 21.64227006, 7.119015876, 37.16855806, 39.64758621, 49.54820392, 7.259462637, 2.406703429, 2.5315822, 41.1501576, 23.95580354, 40.04866184, 19.46684719, 38.33603247, 53.07108142, 22.23244236, 24.64127225, 5.695252936, 0.419464779, 63.83638417, 49.08783506, 0.917144996, 24.02526155, 53.11191045, 16.9648664, 64.61219312, 17.12935611, 23.98294257, 23.4966419, 2.784126455, 75.83295667, 16.42991503, 11.66706073, 13.61092762, 28.431444, 30.41204229, 19.09915544, 16.74706533, 11.91121016, 23.33645123, 44.9518368, 8.128427648, 19.72525528, 11.58332925, 27.33352151, 71.2366888, 1.965468505, 8.354438597, 6.841528212, 8.16195179, 67.3855761, 9.433816931, 80.58936849, 51.3431402, 51.90102075, 60.93016295, 25.56487643, 24.123398, 60.55432894, 3.69430575, 12.59832373, 3.98212567, 9.325805999, 56.29406127, 15.15393291, 34.5129707, 96.3290081, 2.923624642, 1.185190011, 5.785456127, 43.10913972, 2.671099358, 6.760173519, 13.83085256, 12.32670866, 5.890476252, 34.85925883, 8.68869445, 1.353979623, 5.941185992, 14.30943138, 1.251960581, 25.57916619, 37.93503359, 10.1098647, 98.6454163, 58.5633645, 45.5972851, 46.20577515, 6.258500257, 31.29029182, 3.683142718, 3.319049722};
std::vector<double> unav = {2.353382117, 15.46243664, 0.038280007, 0.223109, 0.087265331, 17.34857531, 0.010991192, 14.61796607, 26.9211376, 2.912101956, 0.350393209, 0.763029411, 1.787178619, 27.85698528, 53.03055525, 49.4338084, 0.17751385, 11.30692996, 0.077927736, 1.635438236, 1.180958419, 0.773377551, 1.558652587, 0.015038852, 22.15692646, 7.230408241, 4.86966496, 2.823677269, 10.75316454, 1.149176154, 5.842049068, 0.02625453, 29.74809276, 2.501037535, 27.246282, 0.133395025, 0.188160594, 4.074451738, 0.026337214, 11.91463331, 23.53368473, 7.43341735, 4.377034389, 35.90003487, 12.27543661, 0.896822058, 5.830481114, 4.9157399, 38.18897136, 6.088599159, 1.222650492, 16.85353207, 3.58977389, 9.720483597, 0.233897922, 6.5465182, 0.22030818, 5.69347751, 3.749293013, 24.42370139, 3.91162942, 0.050371002, 8.540794896, 31.82274854, 1.0043957, 2.90419451, 0.12265845, 19.99257404, 0.0158656, 10.09412663, 0.575783524, 10.58286739, 0.33993095, 0.7464299, 1.413879111, 0.057273327, 8.645673825, 0.50791567, 23.40635093, 87.20656835, 1.457684803, 13.4024186, 1.355977988, 0.086080812, 2.25396871, 2.413938242, 0.100809462, 28.41368671, 6.657818778, 6.839486494, 6.828569928, 5.953781471, 3.18155954, 0.664358817, 34.5116226, 2.626494893, 0.039053607, 5.763214358, 0.91559246, 1.201377508};
std::vector<double> kir = {0.021679542, 0.035460784, 0.011887805, 0.01387247, 0.010358463, 0.014609881, 0.02363808, 0.048306232, 0.012968288, 0.012032372, 0.041924745, 0.068268885, 0.065040365, 0.039292069, 0.019778743, 0.01072632, 0.12604279, 0.076947482, 0.015018097, 0.015899405, 0.019627374, 0.023920044, 0.050810045, 0.010845688, 0.028647066, 0.023967123, 0.021843112, 0.022122675, 0.101099826, 0.042768756, 0.051498301, 0.05500812, 0.016703917, 0.01487378, 0.019128778, 0.075546193, 0.053613512, 0.017716761, 0.023294556, 0.132960352, 0.021546448, 0.01738132, 0.011790092, 0.070962881, 0.026143649, 0.029966983, 0.013751205, 0.06274022, 0.013574126, 0.087987201, 0.095634943, 0.033484784, 0.03522128, 0.016615362, 0.23856684, 0.029441142, 0.0200892, 0.09208021, 0.227701142, 0.026795402, 0.05103712, 0.037030388, 0.011394651, 0.126398368, 0.04638915, 0.14112986, 0.01277116, 0.014459324, 0.01592251, 0.145669682, 0.012396281, 0.012798394, 0.03361483, 0.01276364, 0.050758042, 0.032149404, 0.020031369, 0.039933077, 0.060546187, 0.010382478, 0.026966388, 0.035379273, 0.121934603, 0.038284291, 0.1330248, 0.012145446, 0.047659784, 0.010647569, 0.11492052, 0.025842605, 0.122973086, 0.026636734, 0.01215111, 0.01024654, 0.02074396, 0.010949256, 0.025564, 0.010905224, 0.014869293, 0.013564044};
std::vector<double> nap = {2.311142109, 0.722301672, 3.864087172, 0.80410954, 1.737977965, 0.36389354, 0.743978529, 6.575246884, 0.087929768, 3.357480201, 2.155459269, 0.022366113, 0.119803373, 2.15656547, 0.210725723, 3.4953237, 1.44174294, 0.027062493, 0.180314739, 0.746737151, 1.520975741, 0.072765232, 0.709441158, 0.140308806, 1.933493601, 1.758326742, 1.268552767, 0.017296402, 1.693212294, 1.381537336, 1.277895327, 4.7903981, 1.020587648, 0.26684058, 0.011477305, 2.212858213, 3.27366981, 0.027309985, 5.538610399, 0.693655008, 0.510915797, 0.72550472, 2.116328305, 0.055364501, 7.616631067, 0.560638643, 1.012486655, 1.34442991, 3.944241886, 0.023213507, 2.40200231, 0.941826425, 0.56153503, 0.040217582, 7.284996554, 1.07002588, 3.96011053, 0.14649805, 1.126224412, 0.208809035, 0.05160096, 1.632162442, 0.251753367, 1.921566663, 1.90551983, 1.767402081, 0.31577884, 1.606010537, 1.62183949, 0.405596951, 6.298817349, 2.503539659, 3.97395833, 1.43575445, 2.813766614, 2.601548164, 1.375864249, 0.760576726, 1.428220125, 0.069546432, 2.696206149, 0.524225446, 0.263897542, 2.385102167, 3.4018422, 1.749739559, 3.754355799, 0.609099975, 3.658652356, 0.189585355, 1.623755833, 0.277529262, 0.42300517, 0.010342291, 0.40444804, 0.686136688, 5.825286606, 2.753750361, 1.654697735, 3.053188761};
std::vector<double> kca = {0.02205205, 0.045286777, 0.251453088, 0.21071673, 0.305178182, 1.828159266, 0.016202251, 2.773962785, 0.017874692, 0.017687574, 0.130740502, 0.044044851, 0.083546843, 1.011201682, 1.446660127, 0.11462163, 0.04104393, 0.017505248, 0.069199189, 0.033355769, 0.0699315, 0.084130422, 1.361713114, 0.010654573, 0.118041388, 0.064533663, 0.023542685, 0.03744396, 0.613202289, 0.068825442, 0.058539767, 0.3864722, 0.242532018, 0.015595266, 0.017120342, 0.300946835, 0.149161157, 0.024586548, 0.186745852, 0.179749124, 0.017081505, 1.29398283, 0.117784181, 2.276799021, 0.055563957, 0.349882625, 0.010201626, 0.34348473, 0.078411785, 0.060578686, 0.032715847, 0.023497353, 0.05197205, 0.012556817, 0.02628242, 3.056566755, 0.03994622, 0.01220266, 1.162691187, 0.237480873, 0.06259471, 0.091811926, 7.12490016, 0.019726497, 0.02360297, 0.228912199, 0.1547203, 0.487604129, 0.02499043, 0.010909566, 16.15787324, 0.014735278, 0.01251666, 0.03064101, 0.295124669, 29.37499946, 1.181181059, 0.053462866, 0.072813531, 20.23493982, 0.04917939, 0.019426641, 0.034786645, 0.170331741, 0.68926454, 0.499912866, 0.083347972, 0.109004666, 0.022304227, 0.132329928, 27.61635295, 0.25992038, 0.03558142, 0.129056949, 0.25791266, 0.330488627, 0.06463166, 0.123088995, 0.111118936, 0.070953357};
std::vector<double> tca = {106.7109916, 394.462292, 19.15642274, 19.5995826, 10.66490484, 167.4441128, 27.38861952, 38.73362917, 212.9859143, 217.1296521, 21.31952564, 83.95006296, 16.25316753, 10.9743162, 10.56141025, 73.0179017, 11.8019669, 20.6527585, 619.6417499, 20.5742705, 208.1824398, 19.46962047, 12.65294112, 17.06735749, 14.2035933, 237.6369175, 63.57706195, 853.1207734, 142.6848126, 92.28662302, 532.1446719, 16.1914794, 24.71789979, 33.12158016, 135.7866836, 27.89452544, 24.84326227, 18.80669006, 16.09467567, 299.696313, 213.1635874, 79.6911976, 106.2739777, 13.4558527, 59.06847002, 682.0159775, 249.6568123, 433.885905, 78.66648989, 30.24910664, 22.28225673, 386.6298242, 316.697041, 25.73232919, 102.1201204, 87.03628253, 601.200914, 87.7605646, 131.5671826, 23.98923954, 220.79618, 21.64273, 42.04959208, 48.03854948, 516.532184, 11.2076126, 576.762008, 14.26896794, 111.352705, 11.89805458, 11.14630928, 918.2448464, 19.1293408, 10.0248407, 45.12137458, 10.48523904, 89.66141336, 62.17027052, 12.03031772, 28.32813978, 24.01509106, 269.6905649, 11.83975771, 13.71952562, 73.1001175, 171.9686094, 807.4339214, 79.62933832, 27.52943216, 36.11037944, 11.74054388, 143.190116, 207.77266, 96.8737004, 45.597108, 11.6852829, 155.5729752, 128.356501, 22.7111006, 42.43967904};
std::vector<double> nav = {0.012199775, 35.57976867, 0.221583952, 7.4217603, 47.30513692, 28.092518, 3.689548618, 45.61603915, 18.65011665, 6.424868397, 0.012032406, 24.06003841, 0.012725619, 29.05879214, 0.155403585, 87.8000638, 0.01183643, 0.060950546, 22.09765102, 11.78303386, 0.694974622, 5.597844564, 1.275029792, 27.86529715, 0.012222691, 14.86790094, 6.097877881, 35.14080917, 48.37357772, 0.051436672, 25.96833522, 65.8627974, 66.97195992, 31.14160421, 50.06392683, 77.33728398, 10.92135408, 17.13606985, 94.62667908, 6.340100917, 28.02171303, 0.24399495, 41.46921877, 37.09293313, 96.91209381, 50.16592864, 16.17286927, 47.2758758, 27.62140084, 4.093732142, 12.41942444, 0.016347773, 14.9366005, 46.72635073, 89.29486994, 19.33477692, 7.35979329, 1.30663391, 14.55738545, 70.32030041, 0.06185248, 3.475780072, 2.160469791, 76.41892723, 33.3921561, 1.85356267, 7.28014293, 0.147975376, 6.93004245, 0.080521178, 45.29356827, 0.074820212, 13.9137946, 7.32443711, 2.233196209, 0.016679378, 15.50896413, 6.229226554, 9.599826059, 0.486650432, 56.24083102, 0.662289708, 18.76279072, 23.91094428, 0.01636109, 3.228044856, 95.54276009, 20.46848232, 0.151338098, 19.81839864, 1.64717011, 4.65351858, 54.2989856, 6.056004183, 0.05351341, 2.839234527, 76.74254625, 0.18387145, 12.94178484, 2.61340725};
std::vector<double> kva = {7.052187164, 0.068520205, 0.012973831, 0.16739091, 0.089565377, 2.525534005, 0.022822328, 0.12734079, 0.028346543, 0.156355041, 0.015308004, 2.095222087, 0.040717865, 9.586061567, 1.870246478, 1.85899745, 0.04387724, 6.932736903, 0.261683472, 0.020341391, 0.070383922, 0.041701836, 3.892204782, 1.045005109, 1.121513876, 0.047942651, 0.532828959, 0.14664488, 24.73691154, 0.575647142, 1.722605119, 1.72969863, 0.029856882, 2.121708874, 1.071431724, 0.353580583, 0.081173853, 0.012270342, 15.03141871, 0.093140528, 0.079465453, 0.02580549, 3.724659986, 0.148230269, 0.078790293, 0.033290548, 0.710872638, 0.01360429, 0.519131913, 0.103781008, 5.286881963, 0.01413966, 1.67874006, 0.6336413, 0.103077333, 0.02762257, 1.17717601, 0.21481047, 0.017149876, 0.140194619, 2.62438374, 0.010049089, 0.74509566, 1.467118857, 0.06715045, 0.228681283, 0.01837822, 0.017381494, 0.02087649, 4.435783622, 0.499534272, 0.403040017, 1.81166211, 0.11422026, 0.027849777, 0.011548316, 0.272176632, 1.602923658, 0.935379287, 0.765015837, 0.030821691, 0.028124697, 0.087649148, 0.066284562, 12.1772845, 0.05355369, 0.011885825, 0.044510832, 0.141200635, 0.103517111, 56.23453493, 0.054764792, 2.00708393, 0.673872376, 0.11770465, 0.029488611, 1.198849548, 0.25251878, 0.011615057, 0.012036421};
std::vector<double> kvsi = {0.12902531, 0.022084066, 0.011893042, 0.45607199, 3.960013119, 1.539877786, 0.025417156, 0.767267516, 0.892035202, 7.074394658, 1.207509231, 0.141979602, 0.329691575, 0.05409123, 0.011508321, 0.10357822, 0.04005516, 0.025828797, 0.012295893, 0.608429075, 0.645709709, 0.740649415, 1.212506262, 0.017776019, 0.562600945, 0.045323294, 5.41731301, 0.023679986, 0.018279573, 0.015510977, 0.307876315, 0.01041173, 0.016583929, 0.012376116, 0.11315544, 0.011451166, 0.019323997, 0.019335869, 0.220340174, 1.930869052, 0.363951024, 0.09476846, 0.26333471, 0.130141865, 0.073376559, 5.945982481, 0.8477077, 1.28266504, 0.130828164, 0.436785859, 0.012999868, 0.811301187, 0.01108508, 0.031712748, 1.298416239, 0.089453858, 2.17451844, 0.01583061, 2.446661651, 0.035202464, 0.16391586, 0.926678831, 0.038220726, 5.412465463, 4.55380764, 0.335364386, 0.01031829, 0.368142672, 0.19003208, 2.8750114, 0.099107746, 0.04804027, 0.07965906, 0.15136355, 0.02391256, 0.249888064, 0.012728012, 0.207161164, 0.062849353, 0.071936794, 0.130961935, 0.231849424, 0.039237912, 3.602694862, 0.36621183, 0.034806239, 1.504904164, 0.177611747, 0.239874038, 0.360455303, 0.070348893, 0.136314957, 0.01380402, 1.358920597, 0.02517478, 0.034387666, 0.692307891, 0.089854555, 0.135195137, 0.414616046};
std::vector<double> ampar = {2.728307519, 0.124180019, 0.001405082, 2.5415099, 0.233625309, 0.016619148, 1.091786512, 0.372163895, 0.57039298, 7.623202155, 0.152746264, 0.341799559, 0.112815195, 0.412252422, 0.152946592, 0.06771556, 0.32247203, 0.089744861, 6.533112717, 2.575213931, 0.103621671, 0.512579927, 3.360213628, 9.08550156, 9.650723097, 5.996904681, 0.040286882, 1.310516748, 0.001229686, 4.594125545, 0.075702225, 0.18988165, 0.773490949, 0.310945479, 0.739473488, 0.126896445, 0.930458378, 0.007914834, 0.150859124, 0.745548791, 0.363961471, 0.01378482, 1.538943225, 1.029355521, 0.107726813, 4.619787651, 5.656829441, 0.00119514, 0.30097979, 0.002474764, 0.005217258, 0.033573211, 0.00368895, 9.337249026, 0.11299044, 0.045167775, 0.0665077, 0.00428266, 0.16642514, 0.097537683, 0.0026903, 0.192966981, 0.027833172, 0.012131691, 3.77769449, 0.064964935, 0.49313097, 0.254481267, 0.00858993, 0.081927813, 0.06020211, 0.279341092, 0.12170118, 0.0501902, 0.550488468, 0.846835357, 0.023036111, 0.054158953, 0.020477952, 0.04400997, 2.853690734, 0.005426689, 0.12047284, 0.001086042, 0.01207834, 0.078863979, 0.669864734, 0.525913471, 0.034612835, 0.200804257, 0.032214468, 0.087243445, 0.17413557, 0.033698617, 0.02411178, 0.010383088, 0.524327673, 0.185899632, 1.972096557, 0.018811057};

std::vector<double> nmdar = {0.001289703, 0.182623134, 2.432309747, 2.07200294, 0.730530156, 0.074524348, 0.160865518, 0.002203581, 0.04176914, 0.215326985, 0.005339959, 0.001984831, 0.001085029, 0.301190486, 0.002479324, 0.03134237, 0.00852423, 0.001137709, 0.029885108, 0.026565509, 0.006843833, 0.001080132, 1.870696336, 0.01681462, 0.02831273, 0.012038065, 0.127943003, 0.075386513, 0.006840247, 0.775681817, 0.049230382, 0.01278642, 0.045110011, 0.052736905, 0.021671384, 0.127245493, 0.031280784, 0.029357092, 0.029841329, 0.055476949, 0.001336228, 0.12461499, 0.229918105, 0.008538837, 0.027905862, 0.022863693, 0.092879496, 0.11905635, 0.008780679, 0.113949824, 0.075036578, 0.072993808, 0.00280332, 0.004617915, 0.119161933, 0.010225012, 0.55627847, 0.0067437, 0.001021249, 0.003970154, 0.02462865, 0.669249417, 0.01801175, 0.144870255, 0.00100726, 0.010238684, 0.0020539, 0.003765575, 0.20137956, 0.013402918, 0.04439876, 0.005508851, 0.00760336, 0.00311267, 4.344356402, 3.314864981, 0.329844884, 0.262955501, 0.047628875, 0.030146646, 0.290852984, 0.003309352, 0.011628896, 0.108768357, 0.01520737, 0.040745432, 0.250953807, 0.032675823, 0.005595881, 0.121074561, 0.013737789, 0.011040055, 0.00145491, 1.573572708, 0.00353934, 0.02215911, 0.001000318, 0.210910104, 0.014513553, 0.029667626};

std::vector<double> tna = {1687.377446, 1056.622514, 3532.926155, 2849.02257, 1055.459563, 2549.639427, 1133.789274, 2307.714175, 2012.032783, 3414.815796, 3099.922045, 1578.955711, 1332.088235, 1553.744048, 2740.95562, 2570.4641, 2259.27397, 2049.664864, 2124.34201, 1555.023288, 2561.177368, 1026.747137, 3927.480009, 1202.335048, 3189.482711, 2015.221772, 2680.185149, 1025.825504, 1882.316234, 1637.994401, 2225.918462, 1485.63386, 1273.470749, 1141.557531, 1886.462405, 1122.022736, 1960.318352, 1119.753619, 1539.595169, 3502.154559, 1863.429091, 5602.74172, 2439.623795, 1162.737086, 2634.58972, 1781.614649, 5304.610916, 1165.51919, 3527.561707, 1897.810507, 4015.198509, 1980.653761, 1069.61631, 2357.62841, 1649.694278, 1058.482063, 2797.65933, 2007.18413, 1983.481541, 2975.385197, 4019.09622, 2287.023363, 2928.194422, 2429.051385, 1113.54217, 1871.654199, 2917.75297, 2379.397159, 2414.37248, 1100.183248, 2262.235504, 3120.540538, 2041.60436, 1952.32131, 3439.873248, 4623.661525, 1404.683904, 1988.552433, 2345.516663, 1466.455785, 1861.037407, 1650.392302, 2965.327278, 2723.096672, 2765.70537, 2390.172105, 1304.422479, 1253.912223, 4649.078304, 1496.196822, 2021.721401, 1051.355124, 2180.58834, 2054.341988, 1322.73554, 1286.910832, 1915.011125, 3058.942231, 2821.885732, 2891.716447};
std::vector<double> xna = {42.13072163, 14.41894155, 44.95114878, 42.3173168, 24.03652244, 41.22598641, 44.55786334, 36.35939053, 19.47017383, 39.28979675, 43.72922785, 32.14687833, 33.30515838, 21.11522965, 20.92372249, -23.384113, 36.870381, 41.01377624, 38.75487574, 38.6914001, 40.14919577, 32.85476632, 43.62614714, 34.45772695, 34.27479644, 31.593555, 33.33851666, 29.35231024, 39.85841602, 44.54903707, 36.93175042, 14.9617042, 11.17170997, 26.23983387, 40.65906277, 18.94617409, 33.73828819, 30.76134087, 12.27978599, 35.79376646, 26.52184175, 42.7193722, 32.34703197, 34.6239253, 13.33918705, 43.57927582, 33.28862034, 32.3592264, 29.34613044, 27.90182956, 36.67098003, 27.97872904, 41.5745854, 21.94781349, 37.60823932, 33.33945676, 39.2393916, 36.4910983, 44.49827112, 40.28262196, 32.7708315, 35.2659039, 20.90400488, 25.23680505, 42.8129699, 32.33217688, 42.8397944, 32.67581862, 28.3367329, 42.36573409, 31.89550399, 2.48132048, 40.0612629, 25.4405336, 36.91726579, 44.29360671, 42.37332911, 38.72382912, 18.34760525, 12.10536493, 34.41079403, 39.05720679, 27.87397322, 44.05074043, 44.6162475, 38.11271738, 24.83592377, 26.149653, 32.37340361, 15.88209451, 36.16806722, 27.21672387, 28.6506768, 38.16503936, 19.8725947, 27.79964871, 38.22683532, 7.11777601, 42.09744668, 36.55530142};
std::vector<double> yna = {-1.62303228, 5.16107954, 17.50089632, 22.952908, 25.18407716, 28.4782324, -9.63944708, 15.02701433, 14.49049141, 13.54025586, -17.37934784, 8.10966101, -13.15631347, 22.39621748, 23.09753585, 26.1852732, -6.586083, -2.45644657, -10.45255406, 22.19275543, 12.63824621, -5.3632483, 5.11276278, 36.87926093, 15.35144087, 38.22230827, 17.24830753, -25.26432627, 17.43499416, 20.99015166, 5.62478221, 24.2965912, 28.94055221, 27.83951015, 11.96998392, 35.44719397, -3.52223158, 5.65445558, 21.52398317, 16.51374311, 12.8012128, 14.4976382, 28.42143985, 20.05526562, 42.63614946, -36.91774641, 29.59915391, -3.9370485, 24.11679449, 7.46332969, -2.48536863, 13.11684556, 4.50706552, 34.26769925, 6.44471921, 12.8051663, -8.3624154, -3.4899814, 10.79287976, -5.39838702, -9.7439924, -21.39062348, 4.68733802, -6.24302608, 2.78565162, 7.43863357, 13.4082399, 15.22818344, 17.1390443, -2.79479569, 1.94994249, 11.28503164, 6.61777071, 11.9871898, 17.31362694, 30.55351878, 12.29225797, 15.41699659, 2.17240931, 2.5514626, 11.48718937, 23.51460983, 11.74371066, 6.2846908, -15.094635, 11.52146542, 4.62543786, 23.62805158, 7.56562593, 6.13145483, 23.84592228, -16.28753115, 21.3841335, 3.66817628, 15.3829208, 6.81351498, 0.78635048, 41.3163302, 6.37515382, 14.69687711};

for (int rs=0; rs<100; rs++)  {
if(rs!=63){
continue;
}

    double g_lek  = lek[rs];   
   double g_lena  = lena[rs];   
    double g_kvhh  =kvhh[rs];               
    double g_cav  =cav[rs];             
    double g_kna  = kna[rs];           
    double g_unav  =unav[rs]; 
    double g_kir =kir[rs]; 
    double g_nap=nap[rs]; 
    double g_kca=kca[rs] ; 
    double tau_ca=tca[rs]; 
    double g_nav=nav[rs]; 
    double g_kva= kva[rs]; 
    double g_kvsi=kvsi[rs]; 
    double g_ampar  =ampar[rs] ; 
    double g_nmdar  =nmdar[rs];
    double tau_na    = tna[rs]; 
    double x_na = xna[rs]-12.6; 
    double y_na =yna[rs] ; 
    

    int NE =84;   //number of neurons
    double con_th = 0.8;   //connection threshold
    std::string con_th_str =std::to_string(con_th);  //string type of con_th
    int T =10000;  //#ms
    double dt = 0.01;         //step size  #ms
    int Lt = T/dt;

    int seed =4;
    srand(seed);

    //make connectgion matrix
    std::vector<std::vector<int>> neuron_cons(NE, std::vector<int>(NE));
    int* neuron_syN = (int*)malloc(sizeof(int)*NE);  //array for the number of synapses per neuron

    for (int i = 0; i < NE; i++) {
        for (int j = 0; j < NE; j++) {
            if (i==j){
                neuron_cons[i][j] = 0;
            }
            else{
                double a = (double)rand()/RAND_MAX;
                
                if (a > con_th){
                neuron_cons[i][j] = 1;
                }
            }
        }
    }

    //output connection matrix
    // for (int i = 0; i < NE; i++) {
    //     for (int j = 0; j < NE; j++) {
    //          printf("neuron_cons: %d\n"  , neuron_cons[i][j]);
    //     }
    // }

    //make array for the number of synapses per neuron
    for (int i = 0; i < NE; i++) {
        int syN = 0;
        for (int j = 0; j < NE; j++) 
        {
        if (neuron_cons[i][j] ==1){
            syN += 1;
        }
    }
    neuron_syN[i]=syN;
    printf("neuron%d, num of synapses: %d\n"  , i, syN);
    }


    //calculate total synapses
    int syN_sum =0;
    for (int i = 0; i < NE; i++) {
        syN_sum += neuron_syN[i];
        }
    printf("total synapses: %d\n", syN_sum);

    //make pre-synaptic index list
    int* synID = (int*)malloc(sizeof(int)*syN_sum);
    int syN_sum_i = 0;
    for (int n=0; n<NE; n++){

            int syN = neuron_syN[n];
            std::vector<int> con_in =  neuron_cons[n];
        
            int c = 0;
            for (int k=0; k<NE; k++){
            if (con_in[k]==1){
                synID[syN_sum_i + c] =k;
                c += 1;
            }
            }
            syN_sum_i += syN;
       }   

    //output pre-synaptic index
    for (int i=0; i<syN_sum; i++){
        printf("synID[%d]: %d\n", i, synID[i]);
    }

    //GPU device setup
    int dev = 3;
    cudaDeviceProp deviceProp;
    CHECK(cudaGetDeviceProperties(&deviceProp, dev));
    printf("Using Device %d: %s\n", dev, deviceProp.name);
    CHECK(cudaSetDevice(dev));

    //start timer
    double iStart = cpuSecond();


    // 計算したvの保存用配列を作成
    std::vector<std::vector<double>> v_arr(NE, std::vector<double>(Lt));
     for (int i = 0; i < NE; i++) {
        v_arr[i][0] = -45;
     }
    
    //bytes
    int b_neuron = sizeof(double)*NE;
    int b_syn = sizeof(double)*syN_sum;

    int b_neuron_i = NE* sizeof(int);
    int b_syn_i = syN_sum * sizeof(int);

    //malloc host memory
    double *v,*mks,  *hunav,*hnav,  *nk, *na, *ha, *ca,  *s_a, *s1_a, *xn_a;
    v = (double*)malloc(b_neuron);
    mks= (double*)malloc(b_neuron);
    hunav = (double*)malloc(b_neuron);
    hnav = (double*)malloc(b_neuron);
    nk = (double*)malloc(b_neuron);
    na = (double*)malloc(b_neuron);
    ha = (double*)malloc(b_neuron);
   ca = (double*)malloc(b_neuron);
    s_a = (double*)malloc(b_syn);
    s1_a = (double*)malloc(b_syn);
    xn_a = (double*)malloc(b_syn);

    //initialization of variables
    for (int i = 0; i < NE; i++) {
    double v_r = ((double)rand()/RAND_MAX)*(-70);
     double mks_r = ((double)rand()/RAND_MAX);
      double hunav_r = ((double)rand()/RAND_MAX);
      double hnav_r = ((double)rand()/RAND_MAX);
       double n_r = (double)rand()/RAND_MAX;
       double na_r = (double)rand()/RAND_MAX*(10);
     double ha_r = ((double)rand()/RAND_MAX);
       double ca_r = (double)rand()/RAND_MAX*(10);
      
       v[i]= v_r; 
        mks[i]=mks_r;
        hunav[i] =hunav_r;
        hnav[i] = hnav_r;
        nk[i] = n_r;
        na[i]=na_r;
       ha[i]= ha_r;
        ca[i]=ca_r;
        
        
        //v[i]= -45;
        //mks[i]=0.34;
        //hunav[i] = 0.045;
        //hnav[i] = 0.045;
        //nk[i] = 0.54;
        //na[i]= 7;
       //ha[i]= 0.045;
        //ca[i]=1; 
    }

    for (int i = 0; i < syN_sum; i++) {
                   s_a[i] = 0.01;  
                   s1_a[i] = 0.01;  
                   xn_a[i] = 0.01;  
        }

    // malloc device global memory
    double *d_v, *d_v_nw,*d_mks,  *d_hunav, *d_hnav, *d_nk, *d_na,  *d_ha, *d_ca,  *d_s_a, *d_s_a2, *d_s_a3, *d_s1_a, *d_s1_a2, *d_s1_a3, *d_xn_a, *d_xn_a2, *d_xn_a3;
    int *d_neuron_syN, *d_synID;
    CHECK(cudaMalloc((void **)&d_v, b_neuron));
    CHECK(cudaMalloc((void **)&d_v_nw, b_neuron ));
     CHECK(cudaMalloc((void **)&d_mks, b_neuron));
    CHECK(cudaMalloc((void **)&d_hunav, b_neuron));
    CHECK(cudaMalloc((void **)&d_hnav, b_neuron));
    CHECK(cudaMalloc((void **)&d_nk, b_neuron));
    CHECK(cudaMalloc((void **)&d_na, b_neuron));
    CHECK(cudaMalloc((void **)&d_ha, b_neuron));
     CHECK(cudaMalloc((void **)&d_ca, b_neuron));
    CHECK(cudaMalloc((void **)&d_s_a, b_syn));
    CHECK(cudaMalloc((void **)&d_s_a2, b_syn));
    CHECK(cudaMalloc((void **)&d_s_a3, b_syn));
     CHECK(cudaMalloc((void **)&d_s1_a, b_syn));
    CHECK(cudaMalloc((void **)&d_s1_a2, b_syn));
    CHECK(cudaMalloc((void **)&d_s1_a3, b_syn));
    CHECK(cudaMalloc((void **)&d_xn_a, b_syn));
    CHECK(cudaMalloc((void **)&d_xn_a2, b_syn));
    CHECK(cudaMalloc((void **)&d_xn_a3, b_syn));
    CHECK(cudaMalloc((void **)&d_neuron_syN, b_neuron_i));
    CHECK(cudaMalloc((void **)&d_synID, b_syn_i));

    CHECK(cudaMemcpy(d_neuron_syN, neuron_syN, b_neuron_i, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_synID, synID, b_syn_i, cudaMemcpyHostToDevice));
    
    //calculte by t
    for (int it=0; it<Lt; it++){
     if (it != 0){
            
            // transfer data from host to device
            CHECK(cudaMemcpy(d_v, v, b_neuron, cudaMemcpyHostToDevice));
             CHECK(cudaMemcpy(d_mks, mks, b_neuron, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_hunav, hunav, b_neuron, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_hnav, hnav, b_neuron, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_nk, nk, b_neuron, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_na, na, b_neuron, cudaMemcpyHostToDevice));
           CHECK(cudaMemcpy(d_ha, ha, b_neuron, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_ca, ca, b_neuron, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_s_a, s_a, b_syn, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_s1_a, s1_a, b_syn, cudaMemcpyHostToDevice));
            CHECK(cudaMemcpy(d_xn_a, xn_a, b_syn, cudaMemcpyHostToDevice));
            
            
            // invoke kernel at host side
            int dimx = NE/blockdim_x;
            int dimy = 1/blockdim_y;
            dim3 block(blockdim_x, blockdim_y, 1);
            dim3 grid(dimx, dimy);
            
            dt_gpu<<<grid, block>>>(d_v, d_v_nw, d_mks, d_hunav, d_hnav, d_nk, d_na, d_ha, d_ca, d_s_a, d_s_a2, d_s_a3,d_s1_a, d_s1_a2, d_s1_a3,d_xn_a, d_xn_a2, d_xn_a3, d_neuron_syN, d_synID, NE, syN_sum, dt, 
                                        g_lek, g_lena,  g_kvhh, g_cav,g_kna, g_unav, g_kir, g_nap, g_kca, tau_ca,g_nav,  g_kvsi, g_kva, g_ampar, g_nmdar, tau_na, x_na, y_na);
            CHECK(cudaDeviceSynchronize());
        
           // check kernel error
            CHECK(cudaGetLastError());

            // copy kernel result back to host side
            CHECK(cudaMemcpy(v, d_v_nw, b_neuron, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(mks, d_mks, b_neuron, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(hunav, d_hunav, b_neuron, cudaMemcpyDeviceToHost));
           CHECK(cudaMemcpy(hnav, d_hnav, b_neuron, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(nk, d_nk, b_neuron, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(na, d_na, b_neuron, cudaMemcpyDeviceToHost));
           CHECK(cudaMemcpy(ha, d_ha, b_neuron, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(ca, d_ca, b_neuron, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(s_a, d_s_a3, b_syn, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(s1_a, d_s1_a3, b_syn, cudaMemcpyDeviceToHost));
            CHECK(cudaMemcpy(xn_a, d_xn_a3, b_syn, cudaMemcpyDeviceToHost));
            
            //計算したvを保存用配列に代入
             for (int i = 0; i < NE; i++) {
                v_arr[i][it] = v[i];
             }
      } //if it ==0
     } //for it

    //release host device memory
    CHECK(cudaFree(d_v));
    CHECK(cudaFree(d_v_nw));
    CHECK(cudaFree(d_mks));
    CHECK(cudaFree(d_hunav));
   CHECK(cudaFree(d_hnav));
    CHECK(cudaFree(d_nk));
    CHECK(cudaFree(d_na));
    CHECK(cudaFree(d_ha));
    CHECK(cudaFree(d_ca));
    CHECK(cudaFree(d_s_a));
    CHECK(cudaFree(d_s_a2));
    CHECK(cudaFree(d_s_a3));
     CHECK(cudaFree(d_s1_a));
    CHECK(cudaFree(d_s1_a2));
    CHECK(cudaFree(d_s1_a3));
    CHECK(cudaFree(d_xn_a));
    CHECK(cudaFree(d_xn_a2));
    CHECK(cudaFree(d_xn_a3));
    CHECK(cudaFree(d_synID));
    CHECK(cudaFree(d_neuron_syN));

    free(v);
     free(mks);
    free(hunav);
    free(hnav);
    free(nk);
    free(na);
    free(ha);
     free(ca);
    free(s_a);
    free(s1_a);
    free(xn_a);
    free(neuron_syN);
    free(synID);

    //end timer
    double iElaps = cpuSecond() - iStart;
    printf("elapsed %f sec\n", iElaps);
   
    //保存用配列をｃｓｖファイルに出力
    for (int i=0; i<NE; i++){
        std::vector<double> v_ = {&v_arr[i][0], &v_arr[i][Lt-1]};
        std::string dir = "FNAN6_random";
        std::string savedir = "./"+dir+"/N_"+std::to_string(NE) + "/conth_"+ con_th_str +"/seed_" +std::to_string(seed)+"/number"+std::to_string(rs)+"/";  
        std::filesystem::create_directories(savedir);  //make dirs reccurently
        
        std::string savef = savedir+"N"+std::to_string(i)+".csv";
        std::ofstream ofs(savef);
             if (!ofs) {
                    std::cerr << savef << " ファイルが作れません" << std::endl;
                }
        for (int it=0; it<Lt; it++){
            ofs << v_[it];
            ofs <<",";
            }
            ofs << std::endl;
    }
}


}